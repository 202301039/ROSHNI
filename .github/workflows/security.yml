name: Security & Dependencies

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  # Dependency Updates
  dependency-updates:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit
        pip-audit --desc --format=json --output=backend-security-report.json

    - name: Check Node.js dependencies
      working-directory: ./frontend
      run: |
        yarn audit --json > frontend-security-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          backend/backend-security-report.json
          frontend/frontend-security-report.json

  # CodeQL Analysis
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Set up Python (for Python analysis)
      if: matrix.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js (for JavaScript analysis)
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Python dependencies
      if: matrix.language == 'python'
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      working-directory: ./frontend
      run: yarn install --frozen-lockfile

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  # Container Security Scanning
  container-security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: roshni-backend:security-scan

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: roshni-frontend:security-scan

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'roshni-backend:security-scan'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'roshni-frontend:security-scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Check for SARIF files
      id: check-sarif
      run: |
        if [ -f "backend-trivy-results.sarif" ] || [ -f "frontend-trivy-results.sarif" ]; then
          echo "sarif-files-exist=true" >> $GITHUB_OUTPUT
        else
          echo "sarif-files-exist=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.check-sarif.outputs.sarif-files-exist == 'true'
      with:
        sarif_file: |
          backend-trivy-results.sarif
          frontend-trivy-results.sarif

  # License Compliance
  license-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check Python licenses
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip-licenses --format=json --output-file=backend-licenses.json

    - name: Check Node.js licenses
      working-directory: ./frontend
      run: |
        yarn install --frozen-lockfile
        npx license-checker --json > frontend-licenses.json

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          backend/backend-licenses.json
          frontend/frontend-licenses.json

  # Security Summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-updates, codeql-analysis, container-security, license-check]
    if: always()

    steps:
    - name: Security Summary
      run: |
        echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Updates | ${{ needs.dependency-updates.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security | ${{ needs.container-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| License Compliance | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 Check the Security tab for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY
