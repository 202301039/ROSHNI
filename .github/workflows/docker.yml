name: Docker Image CI

on:
  push:
    branches: [ "main", "develop" ]
    tags: ['v*']
  pull_request:
    branches: [ "main", "develop" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build Docker images
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        timeout: 20m

  # Simple Docker Compose test (optional)
  test-compose:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Docker Compose configuration
      run: |
        echo "Validating docker-compose.yml..."
        # Basic validation - check if it contains expected keywords
        if grep -q "services:" docker-compose.yml; then
          echo "‚úÖ docker-compose.yml has valid structure"
        else
          echo "‚ö†Ô∏è  docker-compose.yml may be malformed"
          exit 1
        fi

  # Deploy to staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment"
        echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        echo "Staging deployment would happen here"

  # Deploy to production (main branch or tags)
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      url: https://roshni.example.com

    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment"
        echo "Backend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}"
        echo "Frontend image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}"
        echo "Production deployment would happen here"

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## üöÄ ROSHNI ${{ github.ref_name }}
          
          ### Changes
          - See commit history for detailed changes
          
          ### Docker Images
          - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}`
          - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}`
          
          ### Deployment
          - [ ] Deploy to staging
          - [ ] Run integration tests
          - [ ] Deploy to production
          - [ ] Verify deployment
        draft: false
        prerelease: false