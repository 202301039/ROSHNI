name: Docker Build & Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Test Docker Compose
  test-docker-compose:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create test environment
      run: |
        cat > .env.test << EOF
        GOOGLE_CLIENT_ID=test-client-id
        GOOGLE_CLIENT_SECRET=test-client-secret
        NEXTAUTH_SECRET=test-secret-key-for-testing
        NEXTAUTH_URL=http://localhost:3000
        BACKEND_URL=http://backend:8000
        NEXT_PUBLIC_BACKEND_URL=http://localhost:8000
        DATABASE_URL=postgresql://postgres:postgres@db:5432/roshni_test
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=roshni_test
        EOF

    - name: Test Docker Compose configuration
      run: |
        docker-compose -f docker-compose.yml --env-file .env.test config

    - name: Build and test services
      run: |
        docker-compose -f docker-compose.yml --env-file .env.test build

    - name: Start services
      run: |
        docker-compose -f docker-compose.yml --env-file .env.test up -d
        sleep 30

    - name: Test backend health
      run: |
        curl -f http://localhost:8000/api/users || exit 1

    - name: Test frontend health
      run: |
        curl -f http://localhost:3000/ || exit 1

    - name: Test Google OAuth endpoint
      run: |
        curl -f http://localhost:3000/api/auth/google || exit 1

    - name: Stop services
      if: always()
      run: |
        docker-compose -f docker-compose.yml --env-file .env.test down

  # Deploy to staging (develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, test-docker-compose]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "ğŸš€ Deploying to staging environment..."
        echo "This would typically include:"
        echo "- Pulling latest images from registry"
        echo "- Updating staging environment"
        echo "- Running database migrations"
        echo "- Health checks"
        echo "- Notifying team"

  # Deploy to production (main branch or tags)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, test-docker-compose]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      url: https://roshni.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ğŸš€ Deploying to production environment..."
        echo "Version: ${{ github.ref_name }}"
        echo "This would typically include:"
        echo "- Pulling latest images from registry"
        echo "- Blue-green deployment"
        echo "- Database migrations"
        echo "- Health checks"
        echo "- Rollback capability"
        echo "- Monitoring alerts"

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## ğŸš€ ROSHNI ${{ github.ref_name }}
          
          ### Changes
          - See commit history for detailed changes
          
          ### Docker Images
          - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.ref_name }}`
          - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.ref_name }}`
          
          ### Deployment
          - [ ] Deploy to staging
          - [ ] Run integration tests
          - [ ] Deploy to production
          - [ ] Verify deployment
        draft: false
        prerelease: false

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}-backend
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: 'true'

    - name: Delete old frontend images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}-frontend
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: 'true'
