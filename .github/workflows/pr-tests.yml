name: Pull Request Tests

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'

jobs:
  # Quick Backend Tests
  backend-quick-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests with SQLite
      working-directory: ./backend
      env:
        DATABASE_URL: sqlite:///./test.db
      run: |
        python -m pytest -v --tb=short

  # Quick Frontend Tests
  frontend-quick-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile

    - name: Run frontend tests
      working-directory: ./frontend
      run: yarn test --watchAll=false --verbose

  # Code Quality Check
  code-quality-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: frontend/yarn.lock

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: yarn install --frozen-lockfile

    - name: Check backend code style
      working-directory: ./backend
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Check frontend code style
      working-directory: ./frontend
      run: |
        yarn lint --max-warnings 0

    - name: Check frontend types
      working-directory: ./frontend
      run: |
        yarn type-check

  # Build Verification
  build-verification:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4

    - name: Verify backend builds
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: roshni-backend:pr-test
        target: development

    - name: Verify frontend builds
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: roshni-frontend:pr-test
        target: development

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-quick-tests, frontend-quick-tests, code-quality-check, build-verification]
    if: always()

    steps:
    - name: Test Results Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-quick-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-quick-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build Verification | ${{ needs.build-verification.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend-quick-tests.result }}" == "success" && "${{ needs.frontend-quick-tests.result }}" == "success" && "${{ needs.code-quality-check.result }}" == "success" && "${{ needs.build-verification.result }}" == "success" ]]; then
          echo "🎉 All tests passed! This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Some tests failed. Please check the logs and fix the issues." >> $GITHUB_STEP_SUMMARY
        fi
